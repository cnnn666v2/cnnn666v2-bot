/**
 *  Format given Miliseconds of a Date/ Date Constructor
 * @param {number|DateConstructor} datestamp - The milliseconds of a Date/ The Date constructor/ Converted Date to ISO, Locale, LocaleDate, etc
 * @param {String} [format] - The String Format, Ex: ("day, dd mmm yyyy")
 * @param {String} [timezone] - The Timezone of Date
 * @example .FormatDate(1613374163494, "day, dd mmm yyyy") // Monday, 15 Feb 2021
 * .FormatDate(265000, "hour:min:sec") // 0:04:25
 * .FormatDate(new Date(265000), "hour:min:sec") // 0:04:25
 */

function FormatDate(datestamp, format = "day, dd mmm yyyy", timezone = "UTC") {
    if (typeof format !== "string") {
        throw new TypeError("format must be typeof String!")
    }

    const Abbr = {day:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], month:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]}
    const NonAbbr = {day:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], month:["January", "February", "March", "April", "May", "June", "Juli", "August", "September", "October", "November", "December"]}
    let date = new Date((datestamp instanceof Date ? datestamp.toLocaleString("en-US", {timeZone:timezone}) : new Date(datestamp).toLocaleString("en-US", {timeZone:timezone})))


    return format.toUpperCase()
    .replace("YYYY", date.getFullYear())
    .replace("YY", new Number(date.getFullYear().toString().slice(2)))
    .replace("DDD", Abbr.day[date.getDay()])
    .replace("DAY", NonAbbr.day[date.getDay()])
    .replace("DD", date.getDate())
    .replace("D", date.getDay() + 1)
    .replace("MMM", Abbr.month[date.getMonth()])
    .replace("MONTH", NonAbbr.month[date.getMonth()])
    .replace("MM", date.getMonth() + 1)
    .replace("MS", date.getMilliseconds())
    .replace("HOUR", (date.getHours().toString().length === 1 && date.getHours() !== 0 ? "0" + date.getHours().toString() : date.getHours()))
    .replace("MIN", (date.getMinutes().toString().length === 1 ? "0" + date.getMinutes().toString() : date.getMinutes()))
    .replace("SEC", date.getSeconds()).toString()
}

module.exports = FormatDate