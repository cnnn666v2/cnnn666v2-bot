"use strict";var __decorate=this&&this.__decorate||function(e,t,r,s){var o,a=arguments.length,n=a<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,r):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,s);else for(var d=e.length-1;0<=d;d--)(o=e[d])&&(n=(a<3?o(n):3<a?o(t,r,n):o(t,r))||n);return 3<a&&n&&Object.defineProperty(t,r,n),n};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LerefRoutes=void 0;const validators_1=require("../utils/decorators/validators");class LerefRoutes{constructor(e){this.node=e}async status(){var e=await this.node.request("/routeplanner/status");return e.class?e:void 0}async freeAddress(e){return 204===(await this.node.post("/routeplanner/free/address",{address:e},!0)).statusCode}async freeAllAddress(){return 204===(await this.node.post("/routeplanner/free/all",void 0,!0)).statusCode}}__decorate([validators_1.check((e,t)=>{if("string"!=typeof t||!t)throw new TypeError("Parameter 'address' must be present and be a non-empty string");return e(t)})],LerefRoutes.prototype,"freeAddress",null),exports.LerefRoutes=LerefRoutes;